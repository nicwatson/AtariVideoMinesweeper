;------------------------------------------------
;
; Atari Video Minesweeper
; by Nicholas Watson
; (C) Nicholas Watson 2010-2024
; License: GPL v3.0 (see LICENSE file)
;
; This is the pre-assembly source code, written for the Atari 2600's MOS 6507 processor,
; suitable for assembly using the _dasm macro assembler_: https://dasm-assembler.github.io/
; For best results, use DASM v2.20.10. Newer versions may produce a non-functioning binary.
;
; If you just want to play the game, you need the .bin file with the assembled machine code.
; In order to execute it, you will need to install the free Atari 2600 Stella emulator, available:
; https://stella-emu.github.io/
; Alternatively, if you have a physical Atari 2600 and a programmable multi-cartridge, you can use the
; .bin to play on authentic hardware that pre-dates Minesweeper itself by over a decade!
;
;
;------------------------------------------------
;
;
; Gameplay Instructions:
;
; Use joystick to move cursor around on grid.
; Reveal tiles selected by cursor by pressing fire button.
; Note: When using an emulator, you may need to hold keys for a moment to get the game to respond.
; 
; Tiles are either empty, contain a number, or contain a landmine.
; If you reveal a mine tile, you asplode!
; A number indicates the number of mines somewhere adjacent to that tile.
; Use deductive reasoning to determine the location of all the mines.
; Flag known mine tiles with the Select switch on the console.  You have ten flags to place.
; (You can remove a misplaced flag by pressing the select switch while the cursor is on the flag.)
; There are ten mines in each grid.  Try to find and flag them all without accidentally blowing up!
; Be careful: the clock is ticking!  At time 000 all the mines will go off.
; After you win or lose, press Reset to play again.
;------------------------------------------------


;------------------------------------------------
; Preamble / headers
;------------------------------------------------
	processor 6502
	include VCS.H
	include MACRO.H

	
;------------------------------------------------
; Constants
;------------------------------------------------
BLACK = #0

; Table of byte offsets from beginning of sprite tables (label num0a)
; This is used to look up sprite data for each tile, which can depict
; a number for 0 to 6, a mine, a "blank" space (unexplored tile), or 
; a placed flag.
;     Each possible minefield tile has a six-line sprite.  Any given tile
; can be accessed as a function of num0a (the label for the address of
; the first sprite's data in ROM)) plus the offset from this table.
; num0a is positioned at $F000 so all tile sprites are on one page of ROM.
;     Thus high byte of any sprite is high byte of num0a, and low byte is offset.
; 'A' and 'B' tiles are mirror images of each other.  Graphics are seven bits
; wide with 'A' tiles padded with zeroes on the right, and 'B' tiles padded
; with zeroes on the left.  On each drawn row of minefield, A and B tiles
; alternate.  This is necessary to maintain proper spacing between tiles.
;     These constants also double as identifiers for the state of a given
; tile - we check what state a tile is in by comparing the value in the "tiles"
; array with values from this table.

TILE0A = #$00
TILE1A = #$06
TILE2A = #$0C
TILE3A = #$12
TILE4A = #$18
TILE5A = #$1E
TILE6A = #$24
TILEMINEA = #$2A
TILE0B = #$30
TILE1B = #$36
TILE2B = #$3C
TILE3B = #$42
TILE4B = #$48
TILE5B = #$4E
TILE6B = #$54
TILEMINEB = #$5A
TILEBLANKA = #$60	; Unexplored tile
TILEBLANKB = #$66	; Unexplored tile
TILEFLAGA = #$6C
TILEFLAGB = #$72

; These are short aliases for the above constants
T0A = TILE0A
T1A = TILE1A
T2A = TILE2A
T3A = TILE3A
T4A = TILE4A
T5A = TILE5A
T6A = TILE6A
T0B = TILE0B
T1B = TILE1B
T2B = TILE2B
T3B = TILE3B
T4B = TILE4B
T5B = TILE5B
T6B = TILE6B
TMA = TILEMINEA
TMB = TILEMINEB

;------------------------------------------------
; Variables
;------------------------------------------------
	SEG.U	RAM
	ORG		$80

; Stores pointers to sprite data as it is being drawn,
; for one line of mine tiles (nine tiles per line).
adigit0		ds 2
adigit1		ds 2
adigit2		ds 2
adigit3		ds 2
adigit4		ds 2
bdigit0		ds 2
bdigit1		ds 2
bdigit2		ds 2
bdigit3		ds 2


; controlsactive is a win/lose/normal state.
;  0 ($00) = normal (allow controls to be used)
;  1 ($01) = win state (controls locked out)
; -1 ($FF) = lose state (controls locked out)
controlsactive	.byte


; Clock is stored as three (quasi-BCD) digits, with one byte per
; digit (this is actual numerical data, not sprite data).
sdigits		ds 3


; Used to interrupt joystick input periodically to prevent rapid cursor movement.
blinkcounter	.byte

background	.byte	; Background colour
flagcount	.byte	; Number of flags remaining to be placed
progress	.byte	; Number of mines not yet correctly flagged
tile		.byte	; Counter to track which tile is to be drawn
tilerow		.byte	; Counter to track which row of tiles is being drawn

selectflag	.byte	; Tracks if the SELECT button is being used this frame
position	.byte	; Position of player cursor on grid
flipflop	.byte	; Used during game init to efficiently flip between 'A' and 'B' sprites
					; when drawing rows of blank tiles (we will repeatedly XOR by $06 to
					; effectively flip between using TILEBLANKA (=$60) and TILEBLANKB (=$66)
timer		.byte	; misc. frame counting timer, e.g. for explosion sound, happy-face delay
randomizer	.byte	; Used to randomly choose one of 27 pre-programmed games

; Location (x,y tile) player of cursor on minefield grid.
cursorx		.byte
cursory		.byte

framecount	.byte	; Frames counter

; Used to memoize two-colour palettes:
col0		.byte
col1		.byte

; Multi-use misc variable "register", used in grid drawing and other places
temp1		.byte

tiles		ds 81	; States (contents) of all 81 grid tiles!
minefield	ds 2	; Pointer to minefield data in ROM


;------------------------------------------------
; START OF ROM
;------------------------------------------------
	SEG		 Bank0
	ORG		 $F000								; 4k ROM start point

;------------------------------------------------
; ROM Tables
;------------------------------------------------


; Sprite data ("upside-down") for each of the tile graphics

num0a:					;00
	.byte #%11111110
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
num1a:					;06
	.byte #%01111100
	.byte #%00010000
	.byte #%00010000
	.byte #%00010000
	.byte #%00110000
	.byte #%00010000
num2a:					;0C
	.byte #%11111110
	.byte #%11000000
	.byte #%01110000
	.byte #%00011100
	.byte #%11000110
	.byte #%11111100
num3a:					;12
	.byte #%11111100
	.byte #%10001100
	.byte #%00111000
	.byte #%00011100
	.byte #%11000110
	.byte #%01111100
num4a:					;18
	.byte #%00010000
	.byte #%00010000
	.byte #%11111110
	.byte #%11011000
	.byte #%11011000
	.byte #%11011000
num5a:					;1E
	.byte #%11111100
	.byte #%00000110
	.byte #%00000110
	.byte #%11111100
	.byte #%11000000
	.byte #%11111110
num6a:					;24
	.byte #%01111100
	.byte #%11100110
	.byte #%11111100
	.byte #%11000000
	.byte #%11100000
	.byte #%01111110
minea:					;2A
	.byte #%00010000
	.byte #%10010010
	.byte #%01111100
	.byte #%01111100
	.byte #%10010010
	.byte #%00010000
num0b:					;30
	.byte #%01111111
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
num1b:					;36
	.byte #%00111110
	.byte #%00001000
	.byte #%00001000
	.byte #%00001000
	.byte #%00011000
	.byte #%00001000
num2b:					;3C
	.byte #%01111111
	.byte #%01100000
	.byte #%00111000
	.byte #%00001110
	.byte #%01100011
	.byte #%01111110
num3b:					;42
	.byte #%01111110
	.byte #%01000110
	.byte #%00011100
	.byte #%00001110
	.byte #%01100011
	.byte #%00111110
num4b:					;48
	.byte #%00001000
	.byte #%00001000
	.byte #%01111111
	.byte #%01101100
	.byte #%01101100
	.byte #%01101100
num5b:					;4E
	.byte #%01111110
	.byte #%00000011
	.byte #%00000011
	.byte #%01111110
	.byte #%01100000
	.byte #%01111111
num6b:					;54
	.byte #%00111110
	.byte #%01110011
	.byte #%01111110
	.byte #%01100000
	.byte #%01110000
	.byte #%00111111
mineb:					;5A
	.byte #%00001000
	.byte #%01001001
	.byte #%00111110
	.byte #%00111110
	.byte #%01001001
	.byte #%00001000
blanka:					;60
	.byte #%11111110
	.byte #%11111110
	.byte #%11111110
	.byte #%11111110
	.byte #%11111110
	.byte #%11111110
blankb:					;66
	.byte #%01111111
	.byte #%01111111
	.byte #%01111111
	.byte #%01111111
	.byte #%01111111
	.byte #%01111111
flaga:					;6c
	.byte #%00000100
	.byte #%00000100
	.byte #%00000100
	.byte #%01111100
	.byte #%01111100
	.byte #%01111100
flagb:					;72
	.byte #%00000010
	.byte #%00000010
	.byte #%00000010
	.byte #%00111110
	.byte #%00111110
	.byte #%00111110
empty:
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000
	.byte #%00000000

; Score display digits: we copy the low and high bytes of addresses
; of the corresponding sprites (only digits 1-6 are shared with
; tile sprite graphics).
score0
	.byte #<numzero
	.byte #>numzero
score1
	.byte #<num1a
	.byte #>num1a
score2
	.byte #<num2a
	.byte #>num2a
score3
	.byte #<num3a
	.byte #>num3a
score4
	.byte #<num4a
	.byte #>num4a
score5
	.byte #<num5a
	.byte #>num5a
score6
	.byte #<num6a
	.byte #>num6a
score7
	.byte #<num7
	.byte #>num7
score8
	.byte #<num8
	.byte #>num8
score9
	.byte #<num9
	.byte #>num9
score10
	.byte #<numzero
	.byte #>numzero
	
; These digits are only used for score and timer, never as tiles:
numzero:
	.byte #%01111100
	.byte #%11000110
	.byte #%11000110
	.byte #%11000110
	.byte #%11000110
	.byte #%01111100
num7:					
	.byte #%11000000
	.byte #%01100000
	.byte #%00110000
	.byte #%00011000
	.byte #%00001100
	.byte #%11111110
num8:					
	.byte #%01111100
	.byte #%11000110
	.byte #%10000010
	.byte #%01111100
	.byte #%10000010
	.byte #%01111100

num9:					
	.byte #%11111100
	.byte #%00000110
	.byte #%00000010
	.byte #%01111110
	.byte #%11000010
	.byte #%01111100

; The happyface graphic
; Prepared with assistance of TIA Playfield Painter
; http://khryssun.free.fr/programming_code.html#Tools
happyface:				
	.byte #%11000000	; Scanline 128
	.byte #%11000000	; Scanline 127
	.byte #%11100000	; Scanline 126
	.byte #%11110000	; Scanline 125
	.byte #%11110000	; Scanline 124
	.byte #%11111000	; Scanline 123
	.byte #%11111000	; Scanline 122
	.byte #%11111000	; Scanline 121
	.byte #%11111100	; Scanline 120
	.byte #%11111100	; Scanline 119
	.byte #%11111100	; Scanline 118
	.byte #%11111100	; Scanline 117
	.byte #%11111110	; Scanline 116
	.byte #%11111110	; Scanline 115
	.byte #%11111110	; Scanline 114
	.byte #%11111110	; Scanline 113
	.byte #%11111110	; Scanline 112
	.byte #%11111110	; Scanline 111
	.byte #%01111110	; Scanline 110
	.byte #%01111110	; Scanline 109
	.byte #%00111110	; Scanline 108
	.byte #%00111110	; Scanline 107
	.byte #%10111111	; Scanline 106
	.byte #%10011111	; Scanline 105
	.byte #%11011111	; Scanline 104
	.byte #%11001111	; Scanline 103
	.byte #%11101111	; Scanline 102
	.byte #%11101111	; Scanline 101
	.byte #%11101111	; Scanline 100
	.byte #%11101111	; Scanline 99
	.byte #%11101111	; Scanline 98
	.byte #%11111111	; Scanline 97
	.byte #%11111111	; Scanline 96
	.byte #%11111111	; Scanline 95
	.byte #%11111111	; Scanline 94
	.byte #%11111111	; Scanline 93
	.byte #%11111111	; Scanline 92
	.byte #%11111111	; Scanline 91
	.byte #%11111111	; Scanline 90
	.byte #%11111111	; Scanline 89
	.byte #%11111111	; Scanline 88
	.byte #%11111111	; Scanline 87
	.byte #%11111111	; Scanline 86
	.byte #%11111111	; Scanline 85
	.byte #%11111111	; Scanline 84
	.byte #%11111111	; Scanline 83
	.byte #%11111111	; Scanline 82
	.byte #%11111111	; Scanline 81
	.byte #%11111111	; Scanline 80
	.byte #%11101111	; Scanline 79
	.byte #%11000111	; Scanline 78
	.byte #%11000111	; Scanline 77
	.byte #%11000111	; Scanline 76
	.byte #%11000111	; Scanline 75
	.byte #%00000111	; Scanline 74
	.byte #%00000111	; Scanline 73
	.byte #%11000111	; Scanline 72
	.byte #%11000011	; Scanline 71
	.byte #%11000000	; Scanline 70
	.byte #%11000100	; Scanline 69
	.byte #%11000110	; Scanline 68
	.byte #%11101110	; Scanline 67
	.byte #%11111110	; Scanline 66
	.byte #%11111110	; Scanline 65
	.byte #%11111110	; Scanline 64
	.byte #%11111110	; Scanline 63
	.byte #%11111110	; Scanline 62
	.byte #%11111110	; Scanline 61
	.byte #%11111100	; Scanline 60
	.byte #%11111100	; Scanline 59
	.byte #%11111100	; Scanline 58
	.byte #%11111100	; Scanline 57
	.byte #%11111000	; Scanline 56
	.byte #%11111000	; Scanline 55
	.byte #%11111000	; Scanline 54
	.byte #%11110000	; Scanline 53
	.byte #%11110000	; Scanline 52
	.byte #%11100000	; Scanline 51
	.byte #%11100000	; Scanline 50
	.byte #%11000000	; Scanline 49
	.byte #%11000000	; Scanline 48
	.byte #%11000000	; Scanline 47 (81 lines)

; Splash screen playfield data
; Prepared with assistance of TIA Playfield Painter
; http://khryssun.free.fr/programming_code.html#Tools
; Playfield generated by TIA Playfield Painter 1.03
; Palette Used = NTSC
; Background Colour = $0 - Playfield Colour = $2C
; Mode Used = ASYMMETRICAL
; Playfields generated = PF0, PF1, PF2, PF3, PF4, PF5
; Datas lines are reversed
; 192 Line(s) saved = 191 - 0

Screen_PF0
	.byte #%00010000	; Scanline 27
	.byte #%00010000	; Scanline 26
	.byte #%00010000	; Scanline 25
	.byte #%00010000	; Scanline 24
	.byte #%00010000	; Scanline 23
	.byte #%00010000	; Scanline 22
	.byte #%00010000	; Scanline 21
	.byte #%00110000	; Scanline 20
	.byte #%01110000	; Scanline 19
	.byte #%01010000	; Scanline 18
	.byte #%01010000	; Scanline 17
	.byte #%01010000	; Scanline 16
	.byte #%01110000	; Scanline 15
	.byte #%01110000	; Scanline 14
	.byte #%00100000	; Scanline 13

Screen_PF1
	.byte #%10000100	; Scanline 27
	.byte #%10000100	; Scanline 26
	.byte #%10001110	; Scanline 25
	.byte #%10001000	; Scanline 24
	.byte #%10001000	; Scanline 23
	.byte #%10001000	; Scanline 22
	.byte #%10001000	; Scanline 21
	.byte #%10001110	; Scanline 20
	.byte #%10001110	; Scanline 19
	.byte #%10001010	; Scanline 18
	.byte #%10001010	; Scanline 17
	.byte #%11101010	; Scanline 16
	.byte #%11101010	; Scanline 15
	.byte #%10000100	; Scanline 14

Screen_PF2
	.byte #%00011011	; Scanline 27
	.byte #%00010010	; Scanline 26
	.byte #%00010010	; Scanline 25
	.byte #%00010010	; Scanline 24
	.byte #%00010010	; Scanline 23
	.byte #%00010010	; Scanline 22
	.byte #%00010010	; Scanline 21
	.byte #%00001001	; Scanline 20
	.byte #%00001001	; Scanline 19
	.byte #%00001001	; Scanline 18
	.byte #%00001001	; Scanline 17
	.byte #%00001001	; Scanline 16
	.byte #%00011011	; Scanline 15
	.byte #%00000000	; Scanline 14

Screen_PF3
	.byte #%00100000	; Scanline 27
	.byte #%00100000	; Scanline 26
	.byte #%00100000	; Scanline 25
	.byte #%00100000	; Scanline 24
	.byte #%00100000	; Scanline 23
	.byte #%00100000	; Scanline 22
	.byte #%00100000	; Scanline 21
	.byte #%00100000	; Scanline 20
	.byte #%00100000	; Scanline 19
	.byte #%00100000	; Scanline 18
	.byte #%00100000	; Scanline 17
	.byte #%11100000	; Scanline 16
	.byte #%11100000	; Scanline 15
	.byte #%00100000	; Scanline 14

Screen_PF4
	.byte #%00100110	; Scanline 27
	.byte #%00100010	; Scanline 26
	.byte #%01110010	; Scanline 25
	.byte #%01000010	; Scanline 24
	.byte #%01000010	; Scanline 23
	.byte #%01000010	; Scanline 22
	.byte #%01000100	; Scanline 21
	.byte #%01110100	; Scanline 20
	.byte #%01110100	; Scanline 19
	.byte #%01010100	; Scanline 18
	.byte #%01010100	; Scanline 17
	.byte #%01010100	; Scanline 16
	.byte #%01010110	; Scanline 15
	.byte #%00100000	; Scanline 14

Screen_PF5
	.byte #%00100010	; Scanline 27
	.byte #%00100011	; Scanline 26
	.byte #%00100111	; Scanline 25
	.byte #%00100001	; Scanline 24
	.byte #%00100001	; Scanline 23
	.byte #%00100001	; Scanline 22
	.byte #%00100001	; Scanline 21
	.byte #%00100111	; Scanline 20
	.byte #%01110111	; Scanline 19
	.byte #%01110101	; Scanline 18
	.byte #%00100101	; Scanline 17
	.byte #%00100101	; Scanline 16
	.byte #%00100101	; Scanline 15
	.byte #%00100010	; Scanline 14

; Pre-programmed minefields
; Atari 2600 doesn't have the capability of generating totally random minefields
; Instead, 27 minefields are preprogrammed into ROM and a random one is selected
; for each game.

minefield1:												; +-----------------+
	.byte TMA, TMB, T1A, T0B, T0A, T1B, TMA, T1B, T0A	; |* * 1     1 * 1  |
	.byte T2A, T2B, T2A, T1B, T1A, T1B, T1A, T1B, T0A 	; |2 2 2 1 1 1 1 1  |
	.byte T0A, T0B, T1A, TMB, T1A, T0B, T0A, T0B, T0A  	; |    1 * 1        |
	.byte T0A, T1B, T2A, T2B, T1A, T0B, T0A, T0B, T0A  	; |  1 2 2 1        |
	.byte T0A, T1B, TMA, T1B, T0A, T0B, T0A, T0B, T0A  	; |  1 * 1          |
	.byte T1A, T2B, T1A, T1B, T0A, T0B, T0A, T0B, T0A  	; |1 2 1 1          |
	.byte TMA, T2B, T1A, T2B, T2A, T2B, T2A, T1B, T1A  	; |* 2 1 2 2 2 2 1 1|
	.byte T1A, T2B, TMA, T2B, TMA, TMB, T2A, TMB, T1A  	; |1 2 * 2 * * 2 * 1|
	.byte T0A, T1B, T2A, T2B, T2A, T2B, T2A, T1B, T1A  	; |  1 1 2 2 2 2 1 1|
														; +-----------------+
														
minefield2:												; +-----------------+
	.byte T1A, TMB, T1A, T0B, T0A, T0B, T1A, T1B, T1A  	; |1 * 1       1 1 1|
	.byte T1A, T1B, T1A, T1B, T1A, T1B, T1A, TMB, T2A  	; |1 1 1 1 1 1 1 * 1|
	.byte T0A, T0B, T0A, T1B, TMA, T1B, T2A, T3B, TMA  	; |      1 * 1 2 3 *|
	.byte T0A, T1B, T1A, T2B, T1A, T2B, T2A, TMB, T2A  	; |  1 1 2 1 2 2 * 2|
	.byte T0A, T1B, TMA, T1B, T0A, T2B, TMA, T4B, T2A  	; |  1 * 1   2 * 4 2|
	.byte T0A, T1B, T1A, T1B, T0A, T2B, TMA, TMB, T2A  	; |  1 1 1   2 * * 2|
	.byte T0A, T0B, T0A, T0B, T0A, T1B, T3A, TMB, T2A  	; |          1 3 * 2|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T1A, T1B, T1A  	; |            1 1 1|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
														; +-----------------+
														
minefield3:												; +-----------------+
	.byte T1A, T1B, T1A, TMB, T1A, T1B, TMA, T1B, T0A  	; |1 1 1 * 1 1 * 1  |
	.byte TMA, T1B, T1A, T1B, T1A, T1B, T2A, T2B, T1A  	; |* 1 1 1 1 1 2 2 1|
	.byte T1A, T1B, T0A, T0B, T0A, T0B, T1A, TMB, T1A 	; |1 1         1 * 1|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T1A, T1B, T1A  	; |            1 1 1|
	.byte T1A, T2B, T2A, T1B, T0A, T0B, T1A, T1B, T1A 	; |1 2 2 1     1 1 1|
	.byte T1A, TMB, TMA, T2B, T2A, T3B, T3A, TMB, T1A 	; |1 * * 2 2 3 3 * 1|
	.byte T1A, T2B, T2A, T2B, TMA, TMB, TMA, T2B, T1A 	; |1 2 2 2 * * * 2 1|
	.byte T0A, T0B, T0A, T1B, T2A, T3B, T2A, T1B, T0A 	; |      1 2 3 2 1  |
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A	; |                 |
														; +-----------------+
														

minefield4:												; +-----------------+
	.byte T1A, T1B, T0A, T0B, T0A, T0B, T1A, T1B, T1A  	; |1 1         1 1 1|
	.byte TMA, T1B, T1A, T1B, T1A, T0B, T1A, TMB, T1A  	; |* 1 1 1 1   1 * 1|
	.byte T2A, T2B, T2A, TMB, T3A, T2B, T3A, T2B, T1A  	; |2 2 2 * 3 2 3 2 1|
	.byte TMA, T1B, T2A, TMB, T3A, TMB, TMA, T1B, T0A  	; |* 1 2 * 3 * * 1  |
	.byte T1A, T1B, T1A, T1B, T2A, T2B, T3A, T2B, T1A  	; |1 1 1 1 2 2 3 2 1|
	.byte T0A, T0B, T0A, T0B, T1A, T1B, T2A, TMB, T1A  	; |        1 1 2 * 1|
	.byte T0A, T0B, T0A, T0B, T1A, TMB, T3A, T2B, T2A  	; |        1 * 3 2 2|
	.byte T0A, T0B, T0A, T0B, T1A, T1B, T2A, TMB, T1A  	; |        1 1 2 * 1|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T1A, T1B, T1A  	; |            1 1 1|
														; +-----------------+
														
minefield5:												; +-----------------+
	.byte T0A, T0B, T1A, T1B, T1A, T1B, T1A, T1B, T0A  	; |    1 1 1 1 1 1  |
	.byte T0A, T0B, T1A, TMB, T1A, T1B, TMA, T2B, T1A  	; |    1 * 1 1 * 2 1|
	.byte T0A, T0B, T1A, T1B, T1A, T1B, T2A, TMB, T1A  	; |    1 1 1 1 2 * 1|
	.byte T0A, T1B, T1A, T1B, T0A, T0B, T2A, T3B, T3A  	; |  1 1 1     2 3 3|
	.byte T0A, T2B, TMA, T2B, T0A, T0B, T2A, TMB, TMA  	; |  2 * 2     2 * *|
	.byte T1A, T4B, TMA, T3B, T0A, T0B, T2A, TMB, T3A  	; |1 4 * 3     2 * 3|
	.byte T1A, TMB, TMA, T2B, T0A, T0B, T1A, T1B, T1A  	; |1 * * 2     1 1 1|
	.byte T1A, T2B, T2A, T1B, T0A, T0B, T0A, T0B, T0A  	; |1 2 2 1          |
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; ||                |
														; +-----------------+
														
minefield6:												; +-----------------+
	.byte T0A, T0B, T0A, T1B, TMA, T1B, T0A, T1B, T1A  	; |      1 * 1   1 1|
	.byte T0A, T0B, T0A, T1B, T1A, T1B, T0A, T2B, TMA  	; |      1 1 1   2 *|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T2B, TMA  	; |              2 *|
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T0A, T1B, T1A  	; |1 1 1         1 1|
	.byte T1A, TMB, T1A, T0B, T0A, T1B, T1A, T1B, T0A  	; |1 * 1     1 1 1  |
	.byte T2A, T2B, T1A, T1B, T1A, T2B, TMA, T2B, T1A  	; |2 2 1 1 1 2 * 2 1|
	.byte TMA, T1B, T0A, T1B, TMA, T3B, T2A, T2B, TMA  	; |* 1   1 * 3 2 2 *|
	.byte T1A, T1B, T0A, T2B, T3A, TMB, T1A, T1B, T1A  	; |1 1   2 3 * 1 1 1|
	.byte T0A, T0B, T0A, T1B, TMA, T2B, T1A, T0B, T0A  	; |      1 * 2 1    |
														; +-----------------+
														
minefield7:												; +-----------------+
	.byte TMA, TMB, T2A, T0B, T0A, T0B, T0A, T0B, T0A  	; |* * 2            |
	.byte TMA, TMB, T4A, T1B, T1A, T0B, T0A, T0B, T0A  	; |* * 4 1 1        |
	.byte T3A, TMB, T3A, TMB, T1A, T0B, T0A, T0B, T0A  	; |3 * 3 * 1        |
	.byte T2A, T2B, T3A, T1B, T2A, T1B, T1A, T0B, T0A 	; |2 2 3 1 2 1 1    |
	.byte T1A, TMB, T1A, T0B, T1A, TMB, T1A, T0B, T0A  	; |1 * 1   1 * 1    |
	.byte T1A, T1B, T1A, T0B, T1A, T1B, T1A, T0B, T0A 	; |1 1 1   1 1 1    |
	.byte T0A, T0B, T1A, T1B, T1A, T0B, T0A, T0B, T0A  	; |    1 1 1        |
	.byte T0A, T0B, T1A, TMB, T1A, T0B, T0A, T1B, T1A  	; |    1 * 1     1 1|
	.byte T0A, T0B, T1A, T1B, T1A, T0B, T0A, T1B, TMA 	; |    1 1 1     1 *|
														; +-----------------+
														
minefield8:												; +-----------------+
	.byte T0A, TMB, T0A, T0B, T0A, T0B, T0A, T0B, T0A 	; |                 |
	.byte T1A, T2B, T3A, T2B, T1A, T0B, T0A, T0B, T0A	; |1 2 3 2 1        |
	.byte T1A, TMB, TMA, TMB, T2A, T0B, T0A, T0B, T0A	; |1 * * * 2 1      |
	.byte T1A, T4B, TMA, T6B, TMA, T1B, T0A, T0B, T0A	; |1 4 * 6 * 1      |
	.byte T2A, T3B, TMA, TMB, T2A, T1B, T0A, T0B, T0A 	; |1 3 * * 2 1      |
	.byte TMA, TMB, T3A, T2B, T1A, T0B, T0A, T0B, T0A  	; |2 * 3 2 1        |
	.byte T1A, T2B, T1A, T0B, T0A, T0B, T0A, T0B, T0A  	; |* 2 1            |
	.byte T0A, T1B, T0A, T0B, T0A, T0B, T0A, T1B, T1A  	; |1 1           1 1|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T1B, TMA  	; |              1 *|
														; +-----------------+
														
minefield9:												; +-----------------+
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
	.byte T1A, T1B, T2A, T1B, T1A, T0B, T0A, T0B, T0A  	; |1 1 2 1 1        | 
	.byte T1A, TMB, T2A, TMB, T1A, T0B, T0A, T0B, T0A  	; |1 * 2 * 1        |
	.byte T1A, T1B, T2A, T1B, T1A, T0B, T0A, T0B, T0A  	; |1 1 2 1 1        |
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A 	; |                 |
	.byte T1A, T2B, T1A, T1B, T0A, T1B, T1A, T2B, T1A  	; |1 2 1 1   1 1 2 1|
	.byte T2A, TMB, TMA, T1B, T0A, T2B, TMA, T5B, TMA  	; |2 * * 1   2 * 5 *| 
	.byte T2A, TMB, T3A, T1B, T0A, T3B, TMA, TMB, TMA  	; |2 * 3 1   3 * * *|
	.byte T1A, T1B, T1A, T0B, T0A, T2B, TMA, T5B, TMA  	; |1 1 1     2 * 5 *| 
														; +-----------------+
														
minefielda:												; +-----------------+
	.byte T0A, T0B, T0A, T1B, TMA, T2B, T1A, T1B, T1A  	; |      1 * 2 1 1 1|
	.byte T0A, T1B, T1A, T2B, T3A, TMB, T4A, T3B, TMA  	; |  1 1 2 3 * 4 3 *|
	.byte T1A, T2B, TMA, T1B, T2A, TMB, TMA, TMB, T2A  	; |1 2 * 1 2 * * * 2|
	.byte T1A, TMB, T2A, T1B, T1A, T2B, T3A, T3B, T2A  	; |1 * 2 1 1 2 3 3 2|
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T0A, T1B, TMA  	; |1 1 1         1 *|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T1B, T1A  	; |              1 1|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
	.byte T0A, T0B, T0A, T1B, T1A, T1B, T0A, T0B, T0A  	; |      1 1 1      |
	.byte T0A, T0B, T0A, T1B, TMA, T1B, T0A, T0B, T0A  	; |      1 * 1      |
														; +-----------------+
minefieldb:												; +-----------------+
	.byte TMA, T1B, T0A, T0B, T0A, T0B, T1A, T1B, T1A  	; |* 1         1 1 1|
	.byte T1A, T1B, T0A, T0B, T0A, T0B, T1A, TMB, T1A  	; |1 1         1 * 1|
	.byte T0A, T1B, T2A, T2B, T1A, T0B, T1A, T1B, T1A  	; |  1 2 2 1   1 1 1|
	.byte T0A, T1B, TMA, TMB, T1A, T0B, T1A, T1B, T1A  	; |  1 * * 1   1 1 1|
	.byte T2A, T3B, T3A, T2B, T1A, T0B, T2A, TMB, T2A  	; |2 3 3 2 1   2 * 2|
	.byte TMA, TMB, T1A, T0B, T0A, T0B, T2A, TMB, T2A  	; |* * 1       2 * 2|
	.byte TMA, T3B, T1A, T0B, T0A, T0B, T1A, T1B, T1A  	; |* 3 1       1 1 1|
	.byte T2A, T2B, T1A, T0B, T0A, T0B, T0A, T0B, T0A  	; |2 2 1            |
	.byte T1A, TMB, T1A, T0B, T0A, T0B, T0A, T0B, T0A  	; |1 * 1            |
														; +-----------------+
														
minefieldc:												; +-----------------+
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
	.byte T0A, T1B, T1A, T1B, T0A, T0B, T0A, T0B, T0A  	; |  1 1 1          |
	.byte T1A, T2B, TMA, T1B, T0A, T0B, T1A, T1B, T1A  	; |1 2 * 1     1 1 1|
	.byte T2A, TMB, T2A, T1B, T1A, T1B, T2A, TMB, T1A  	; |2 * 2 1 1 1 2 * 1|
	.byte TMA, T2B, T1A, T0B, T2A, TMB, T3A, T2B, T2A  	; |* 2 1   2 * 3 2 2|
	.byte T1A, T1B, T0A, T0B, T2A, TMB, T3A, T2B, TMA  	; |1 1     2 * 3 2 *|
	.byte T0A, T0B, T0A, T0B, T1A, T1B, T3A, TMB, T3A  	; |        1 1 3 * 3|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T2A, TMB, T3A  	; |            2 * 3|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T1A, T2B, TMA  	; |            1 2 *|
														; +-----------------+
														
minefieldd:												; +-----------------+
	.byte TMA, T1B, T0A, T1B, T1A, T1B, T0A, T1B, TMA  	; |* 1   1 1 1   1 *|
	.byte T1A, T1B, T0A, T1B, TMA, T1B, T0A, T1B, T1A  	; |1 1   1 * 1   1 1|
	.byte T1A, T1B, T0A, T1B, T1A, T1B, T0A, T0B, T0A  	; |1 1   1 1 1      |
	.byte TMA, T1B, T0A, T0B, T0A, T0B, T0A, T1B, T1A  	; |* 1           1 1|
	.byte T1A, T1B, T1A, T1B, T1A, T0B, T0A, T1B, TMA  	; |1 1 1 1 1     1 *|
	.byte T0A, T0B, T1A, TMB, T1A, T0B, T0A, T1B, T1A  	; |    1 * 1     1 1|
	.byte T0A, T0B, T1A, T1B, T1A, T0B, T0A, T0B, T0A  	; |    1 1 1        |
	.byte T1A, T1B, T0A, T1B, T1A, T2B, T1A, T2B, T1A  	; |1 1   1 1 2 1 2 1|
	.byte TMA, T1B, T0A, T1B, TMA, T2B, TMA, T2B, TMA  	; |* 1   1 * 2 * 2 *|
														; +-----------------+
														
minefielde:												; +-----------------+
	.byte T0A, T0B, T1A, T2B, T2A, T1B, T0A, T0B, T0A  	; |    1 2 2 1      |
	.byte T0A, T0B, T1A, TMB, TMA, T3B, T3A, T2B, T1A  	; |    1 * * 3 3 2 1|
	.byte T0A, T1B, T2A, T3B, T3A, TMB, TMA, TMB, T1A  	; |  1 2 3 3 * * * 1|
	.byte T0A, T1B, TMA, T2B, T2A, T3B, T3A, T2B, T1A  	; |  1 * 2 2 3 3 2 1|
	.byte T0A, T1B, T1A, T2B, TMA, T2B, T2A, T1B, T1A  	; |  1 1 2 * 2 2 1 1|
	.byte T0A, T1B, T1A, T2B, T2A, TMB, T2A, TMB, T1A  	; |  1 1 2 2 * 2 * 1|
	.byte T0A, T1B, TMA, T1B, T1A, T1B, T2A, T1B, T1A 	; |  1 * 1 1 1 2 1 1|
	.byte T0A, T1B, T1A, T1B, T0A, T0B, T0A, T0B, T0A  	; |  1 1 1          |
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
														; +-----------------+
														
minefieldf:												; +-----------------+
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
	.byte T1A, T1B, T2A, T1B, T1A, T1B, T1A, T1B, T0A  	; |1 1 2 1 1 1 1 1  |
	.byte T1A, TMB, T2A, TMB, T1A, T2B, TMA, T3B, T1A  	; |1 * 2 * 1 2 * 3 1|
	.byte T1A, T1B, T2A, T1B, T1A, T2B, TMA, T5B, TMA  	; |1 1 2 1 1 2 * 5 *|
	.byte T1A, T1B, T0A, T0B, T0A, T1B, T2A, TMB, TMA  	; |1 1       1 2 * *|
	.byte TMA, T2B, T1A, T1B, T0A, T0B, T1A, T2B, T2A  	; |* 2 1 1     1 2 2|
	.byte T1A, T2B, TMA, T1B, T1A, T1B, T1A, T0B, T0A  	; |1 2 * 1 1 1 1    |
	.byte T0A, T1B, T1A, T1B, T1A, TMB, T1A, T0B, T0A 	; |  1 1 1 1 * 1    |
														; +-----------------+
														
minefield10:											; +-----------------+
	.byte T1A, TMB, T1A, T1B, T1A, T1B, T0A, T0B, T0A  	; |1 * 1 1 1 1      |
	.byte T2A, T2B, T2A, T1B, TMA, T2B, T1A, T0B, T0A  	; |2 2 2 1 * 2 1    |
	.byte T1A, TMB, T1A, T1B, T2A, TMB, T1A, T0B, T0A  	; |1 * 1 1 2 * 1    |
	.byte T2A, T2B, T1A, T0B, T1A, T1B, T1A, T0B, T0A  	; |2 2 1   1 1 1    |
	.byte TMA, T2B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |* 2              |
	.byte TMA, T3B, T1A, T1B, T0A, T0B, T0A, T0B, T0A  	; |* 3 1 1          |
	.byte T1A, T3B, TMA, T2B, T0A, T0B, T0A, T1B, T1A  	; |1 3 * 2       1 1|
	.byte T1A, T3B, TMA, T2B, T0A, T0B, T0A, T1B, TMA  	; |1 3 * 2       1 *|
	.byte TMA, T2B, T1A, T1B, T0A, T0B, T0A, T1B, T1A  	; |* 2 1 1       1 1|
														; +-----------------+
														
minefield11:											; +-----------------+
	.byte T1A, T2B, TMA, T1B, T1A, T2B, TMA, T1B, T0A  	; |1 2 * 1 1 2 * 1  |
	.byte TMA, T2B, T1A, T1B, T1A, TMB, T2A, T1B, T0A  	; |* 2 1 1 1 * 2 1  |
	.byte T1A, T1B, T0A, T0B, T1A, T1B, T1A, T0B, T0A  	; |1 1     1 1 1    |
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T0A, T1B, T1A  	; |1 1 1           1|
	.byte T1A, TMB, T2A, T1B, T0A, T0B, T0A, T2B, TMA  	; |1 * 2 1       2 *|
	.byte T1A, T2B, TMA, T2B, T1A, T0B, T0A, T2B, TMA  	; |1 2 * 2 1     2 *|
	.byte T0A, T1B, T2A, TMB, T1A, T0B, T0A, T1B, T1A  	; |  1 2 * 1     1 1|
	.byte T0A, T0B, T1A, T1B, T1A, T1B, T1A, T1B, T0A  	; |    1 1 1 1 1 1  |
	.byte T0A, T0B, T0A, T0B, T0A, T1B, TMA, T1B, T0A  	; |          1 * 1  |
														; +-----------------+
														
minefield12:											; +-----------------+
	.byte T0A, T0B, T0A, T0B, T0A, T2B, TMA, T3B, TMA	; |          2 * 3 *|
	.byte T0A, T1B, T1A, T1B, T0A, T2B, TMA, T3B, T1A  	; |  1 1 1   2 * 3 1|
	.byte T0A, T2B, TMA, T2B, T0A, T1B, T1A, T1B, T0A  	; |  2 * 2   1 1 1  |
	.byte T0A, T2B, TMA, T3B, T1A, T1B, T1A, T1B, T1A  	; |  2 * 3 1 1 1 1 1|
	.byte T0A, T1B, T1A, T2B, TMA, T1B, T1A, TMB, T1A  	; |  1 1 2 * 1 1 * 1|
	.byte T0A, T0B, T0A, T1B, T1A, T1B, T1A, T1B, T1A  	; |      1 1 1 1 1 1|
	.byte T1A, T1B, T0A, T0B, T0A, T1B, T1A, T1B, T0A  	; |1 1       1 1 1  |
	.byte TMA, T1B, T0A, T1B, T1A, T2B, TMA, T1B, T0A  	; |* 1   1 1 2 * 1  |
	.byte T1A, T1B, T0A, T1B, TMA, T2B, T1A, T1B, T0A  	; |1 1   1 * 2 1 1  |
														; +-----------------+
														
minefield13:											; +-----------------+
	.byte TMA, T1B, T0A, T1B, T2A, TMB, T1A, T0B, T0A  	; |* 1   1 2 * 1    |
	.byte T1A, T1B, T0A, T1B, TMA, T3B, T2A, T0B, T0A  	; |1 1   1 * 3 2    |
	.byte T1A, T1B, T1A, T1B, T2A, TMB, T1A, T1B, T1A  	; |1 1 1 1 2 * 1 1 1|
	.byte T1A, TMB, T1A, T0B, T1A, T1B, T1A, T1B, TMA  	; |1 * 1   1 1 1 1 *|
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T0A, T1B, T1A  	; |1 1 1         1 1|
	.byte T0A, T0B, T0A, T0B, T0A, T1B, T1A, T1B, T0A  	; |        1 1 1 1  |
	.byte T0A, T0B, T0A, T0B, T0A, T1B, TMA, T1B, T0A  	; |          1 * 1  |
	.byte T1A, T1B, T1A, T1B, T1A, T1B, T1A, T2B, T1A  	; |1 1 1 1 1 1 1 2 1|
	.byte TMA, T1B, T1A, TMB, T1A, T0B, T0A, T1B, TMA  	; |* 1 1 * 1     1 *|
														; +-----------------+							
minefield14:											; +-----------------+
	.byte T1A, T2B, T1A, T2B, TMA, T1B, T0A, T1B, TMA  	; |1 2 1 2 * 1   1 *|
	.byte TMA, T2B, TMA, T3B, T2A, T2B, T0A, T1B, T1A  	; |* 2 * 3 2 2   1 1|
	.byte T1A, T2B, T1A, T3B, TMA, T2B, T0A, T0B, T0A  	; |1 2 1 3 * 2      |
	.byte T0A, T1B, T1A, T3B, TMA, T2B, T0A, T0B, T0A  	; |  1 1 3 * 2      |
	.byte T1A, T2B, TMA, T2B, T1A, T1B, T0A, T1B, T1A  	; |1 2 * 2 1 1   1 1|
	.byte T1A, TMB, T2A, T1B, T0A, T0B, T0A, T1B, TMA  	; |1 * 2 1       1 *|
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T0A, T1B, T1A  	; |1 1 1         1 1|
	.byte T0A, T0B, T0A, T0B, T0A, T1B, T1A, T1B, T0A  	; |          1 1 1  |
	.byte T0A, T0B, T0A, T0B, T0A, T1B, TMA, T1B, T0A  	; |          1 * 1  |
														; +-----------------+							
minefield15:											; +-----------------+
	.byte T1A, TMB, T1A, T0B, T1A, TMB, TMA, T1B, T0A  	; |1 * 1   1 * * 1  |
	.byte T1A, T1B, T1A, T0B, T2A, T3B, T3A, T1B, T0A  	; |1 1 1   2 3 3 1  |
	.byte T0A, T0B, T1A, T2B, T3A, TMB, T1A, T0B, T0A  	; |    1 2 3 * 1    |
	.byte T0A, T1B, T2A, TMB, TMA, T2B, T1A, T0B, T0A  	; |0 1 2 * * 2 1    |
	.byte T0A, T1B, TMA, T3B, T2A, T1B, T0A, T1B, T1A  	; |  1 * 3 2 1   1 1|
	.byte T0A, T1B, T1A, T1B, T0A, T0B, T0A, T1B, TMA  	; |  1 1 1       1 *|
	.byte T1A, T1B, T0A, T0B, T0A, T0B, T0A, T1B, T1A  	; |1 1           1 1|
	.byte TMA, T1B, T0A, T0B, T0A, T0B, T1A, T1B, T1A  	; |* 1         1 1 1|
	.byte T1A, T1B, T0A, T0B, T0A, T0B, T1A, TMB, T1A  	; |1 1         1 * 1|
														; +-----------------+							
minefield16:											; +-----------------+
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T1B, T1A  	; |              1 1|
	.byte T1A, T1B, T1A, T0B, T1A, T1B, T1A, T1B, TMA  	; |1 1 1   1 1 1 1 *|
	.byte T1A, TMB, T1A, T0B, T1A, TMB, T1A, T1B, T1A  	; |1 * 1   1 * 1 1 1|
	.byte T1A, T1B, T1A, T0B, T1A, T1B, T1A, T1B, T1A  	; |1 1 1   1 1 1 1 1|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T1B, TMA  	; |              1 *|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T1A, T2B, T2A  	; |            1 2 2|
	.byte T1A, T2B, T2A, T2B, T2A, T3B, T3A, TMB, T1A  	; |1 2 2 2 2 3 3 * 1|
	.byte T1A, TMB, TMA, T2B, TMA, TMB, TMA, T2B, T1A  	; |1 * * 2 * * * 2 1|
														; +-----------------+							
minefield17:											; +-----------------+
	.byte T1A, T1B, T1A, T0B, T1A, T1B, T2A, T2B, T2A  	; |1 1 1   1 1 2 2 2|
	.byte T1A, TMB, T1A, T0B, T1A, TMB, T2A, TMB, TMA  	; |1 * 1   1 * 2 * *|
	.byte T1A, T2B, T2A, T1B, T1A, T1B, T2A, T2B, T2A  	; |1 2 2 1 1 1 2 2 2|
	.byte T1A, T2B, TMA, T1B, T0A, T0B, T1A, T2B, T2A  	; |1 2 * 1     1 2 2|
	.byte T1A, TMB, T2A, T1B, T0A, T0B, T2A, TMB, TMA  	; |1 * 2 1     2 * *|
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T2A, TMB, T3A  	; |1 1 1       2 * 3|
	.byte T0A, T0B, T0A, T0B, T0A, T1B, T2A, T2B, T1A  	; |          1 2 2 1|
	.byte T0A, T0B, T0A, T0B, T0A, T1B, TMA, T1B, T0A  	; |          1 * 1  |
	.byte T0A, T0B, T0A, T0B, T0A, T1B, T1A, T1B, T0A  	; |            1 1  |
														; +-----------------+							
minefield18:											; +-----------------+
	.byte T0A, T0B, T0A, T0B, T1A, T1B, T1A, T1B, TMA  	; |        1 1 1 1 *|
	.byte T1A, T1B, T1A, T0B, T1A, TMB, T1A, T1B, T1A  	; |1 1 1   1 * 1 1 1|
	.byte T1A, TMB, T1A, T0B, T1A, T1B, T1A, T0B, T0A  	; |1 * 1   1 1 1    |
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T1A, T1B, T1A  	; |1 1 1       1 1 1|
	.byte T2A, T2B, T1A, T0B, T0A, T0B, T2A, TMB, T2A  	; |2 2 1       3 * 2|
	.byte TMA, TMB, T2A, T1B, T1A, T0B, T3A, TMB, T3A  	; |* * 2 1 1   3 * 3|
	.byte T2A, T3B, T3A, TMB, T1A, T0B, T2A, TMB, T2A  	; |2 3 3 * 1   2 * 2|
	.byte T0A, T1B, TMA, T2B, T1A, T0B, T1A, T1B, T1A  	; |  1 * 2 1   1 1 1|
	.byte T0A, T1B, T1A, T1B, T0A, T0B, T0A, T0B, T0A  	; |  1 1 1          |
														; +-----------------+							
minefield19:											; +-----------------+
	.byte T0A, T1B, T1A, T1B, T1A, T2B, TMA, T1B, T0A  	; |  1 1 1 1 2 * 1  |
	.byte T0A, T1B, TMA, T1B, T1A, TMB, T3A, T2B, T1A  	; |  1 * 1 1 * 3 2 1|
	.byte T1A, T2B, T2A, T1B, T1A, T1B, T2A, TMB, T1A  	; |1 2 2 1 1 1 2 * 1|
	.byte T1A, TMB, T2A, T2B, T1A, T2B, T2A, T2B, T1A  	; |1 * 2 2 1 2 2 2 1|
	.byte T1A, T2B, TMA, T2B, TMA, T2B, TMA, T1B, T0A  	; |1 2 * 2 * 2 * 1  |
	.byte T0A, T1B, T1A, T2B, T1A, T2B, T1A, T1B, T0A  	; |  1 1 2 1 2 1 1  |
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T0A, T0B, T0A  	; |                 |
	.byte T0A, T1B, T2A, T2B, T1A, T0B, T0A, T0B, T0A  	; |  1 2 2 1        |
	.byte T0A, T1B, TMA, TMB, T1A, T0B, T0A, T0B, T0A  	; |  1 * * 1        |
														; +-----------------+
minefield1a:											; +-----------------+
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T0A, T0B, T0A  	; |1 1 1            |
	.byte T1A, TMB, T1A, T0B, T0A, T0B, T0A, T0B, T0A  	; |1 * 1            |
	.byte T1A, T1B, T1A, T0B, T0A, T1B, T1A, T2B, T1A  	; |1 1 1     1 1 2 1|
	.byte T0A, T0B, T0A, T0B, T0A, T1B, TMA, T2B, TMA  	; |          1 * 2 *|
	.byte T0A, T0B, T1A, T1B, T1A, T1B, T1A, T2B, T1A  	; |    1 1 1 1 1 2 1|
	.byte T1A, T1B, T2A, TMB, T2A, T1B, T2A, T1B, T1A  	; |1 1 2 * 2 1 2 1 1|
	.byte T2A, TMB, T4A, T2B, T3A, TMB, T3A, TMB, T1A  	; |2 * 4 2 3 * 3 * 1|
	.byte T2A, TMB, TMA, T1B, T2A, TMB, T3A, T1B, T1A  	; |2 * * 1 2 * 3 1 1|
	.byte T1A, T2B, T2A, T1B, T1A, T1B, T1A, T0B, T0A 	; |1 2 2 1 1 1 1    |
														; +-----------------+	
minefield1b:											; +-----------------+
	.byte T1A, T1B, T1A, T1B, T2A, TMB, T2A, T1B, T1A  	; |1 1 1 1 2 * 2 1 1|
	.byte T2A, TMB, T2A, T1B, TMA, T2B, T2A, TMB, T1A  	; |2 * 2 1 * 2 2 * 1|
	.byte T2A, TMB, T2A, T1B, T1A, T1B, T1A, T1B, T1A  	; |2 * 2 1 1 1 1 1 1|
	.byte T1A, T1B, T1A, T0B, T0A, T0B, T1A, T2B, T2A  	; |1 1 1       1 2 2|
	.byte T0A, T0B, T0A, T0B, T0A, T0B, T1A, TMB, TMA  	; |            1 * *|
	.byte T0A, T0B, T1A, T1B, T1A, T0B, T1A, T3B, TMA  	; |    1 1 1   1 3 *|
	.byte T0A, T0B, T1A, TMB, T1A, T0B, T0A, T1B, T1A  	; |    1 * 1     1 1|
	.byte T0A, T1B, T2A, T2B, T1A, T0B, T0A, T0B, T0A  	; |  1 2 2 1        |
	.byte T0A, T1B, TMA, T1B, T0A, T0B, T0A, T0B, T0A  	; |  1 * 1          |
														; +-----------------+						


;------------------------------------------------
; The program itself!
;------------------------------------------------

Start 
	CLEAN_START		 ; Clear RAM and Registers
	lda		#%01000010
	sta		VBLANK
	lda		#26
	sta		randomizer	; Initialize randomizer to 26

;------------------------------------------------
; Drawing the splash screen
;------------------------------------------------

ShowSplash
	lda		#0
	sta		VBLANK
	sta		PF1
	VERTICAL_SYNC
	lda		#43
	sta		TIM64T
	
	lda		#$FF
	sta		COLUPF
	lda		#0
	sta		CTRLPF
	
	; How to randomize the game selection:
	; randomizer is a counter that runs from 26 to 0,
	; decrementing each frame while the splash screen is showing.
	; Whatever its value happens to be when the player presses RESET
	; determines which of the 27 pre-programmed games will be chosen
	dec		randomizer
	bne		.checkSplashReset
	lda		#27				; Need to reset randomizer  
	sta		randomizer
	
.checkSplashReset
	lda		#%00000001
	bit		SWCHB
	bne		.waitForSplashVBlank
	jmp		Game
	
.waitForSplashVBlank
	lda		INTIM
	bne		.waitForSplashVBlank
	lda		#0
	sta		VBLANK
	sta		WSYNC
	ldx		#14
	
.splashTopMargin
	sta		WSYNC
	dex
	bne		.splashTopMargin
	ldx		#14
	sta		WSYNC
.splashPart1
	lda		Screen_PF0-1,x
	sta		PF0
	lda		Screen_PF1-1,x
	sta		PF1
	lda		Screen_PF2-1,x
	sta		PF2
	sleep 	5
	lda		Screen_PF3-1,x
	sta		PF0
	lda		Screen_PF4-1,x
	sta		PF1
	lda		Screen_PF5-1,x
	sta		PF2
	sta		WSYNC
	dex
	bne		.splashPart1
	lda		#0
	sta		PF0
	sta		PF1
	sta		PF2
	ldx		#19
.splashGap
	sta		WSYNC
	dex
	bne		.splashGap
	ldx		#80
	lda		#1
	sta		CTRLPF
	sta		WSYNC
.splashHappy
	lda		happyface,x
	sta		PF2
	sta		WSYNC
	dex
	bne		.splashHappy
	lda		#0
	sta		PF2
	ldx		#64
.splashBottomMargin
	sta		WSYNC
	dex
	bne		.splashBottomMargin
	lda		#%01000010
	sta		VBLANK
	lda		#36
	sta		TIM64T
.waitForSplashOverscan
	lda				 INTIM
	bne				 .waitForSplashOverscan

	jmp		ShowSplash

;------------------------------------------------
; Starting a new game
;------------------------------------------------
Game
	lda		#%01000010
	sta		VBLANK
	ldx		randomizer		; Can now use randomizer value to choose a game field
	lda		#<minefield1
	ldy		#>minefield1
.selection
	clc
	adc		#81
	bcc		.nocarry
	iny
.nocarry
	dex
	bne		.selection
	sty		minefield+1
	sta		minefield
	lda		#60
	sta		framecount

	; Store the high-byte of the start address of the digit sprites
	; into the low-byte of each digit pointer (for indirect addressing
	; later on). All sprites should be on the same page of ROM.
	lda		#>num0a
	sta		adigit0+1
	sta		adigit1+1
	sta		adigit2+1
	sta		adigit3+1
	sta		adigit4+1
	sta		bdigit0+1
	sta		bdigit1+1
	sta		bdigit2+1
	sta		bdigit3+1
	lda		#10
	sta		progress
	lda		#TILEBLANKB
	sta		flipflop
	lda		#0
	sta		PF0
	sta		PF1
	sta		PF2
	lda		#$FF
	sta		COLUPF
	lda		#%00110000
	sta		CTRLPF
	lda		#$9A
	sta		col0
	lda		#$8A
	sta		col1
	lda		#60
	sta		blinkcounter
	lda		#8
	sta		cursorx
	sta		cursory
	lda		background
	sta		COLUBK
	lda		#%00000010
	sta		selectflag
	lda		#%00001010
	sta		flagcount
	lda		#60
	sta		framecount
	lda		#9
	sta		sdigits+0
	sta		sdigits+1
	sta		sdigits+2
	ldx		#0
	ldy		#0
	stx		background
	stx		COLUBK

; Display a field of initially blank (unexplored) tiles
.inittiles
	lda		flipflop
	eor		#%00000110
	sta		tiles,x
	sta		flipflop
	iny
	cpy		#9
	bne		.skipeor
	eor		#%00000110
	sta		flipflop
	ldy		#0
	sty		controlsactive

.skipeor
	inx
	cpx		#81
	bne		.inittiles
	ldx		#197
	jmp		MainLoop

;------------------------------------------------
; Main game loop
;------------------------------------------------
MainLoop
	lda		#0
	sta		VBLANK
	sta		PF1
	VERTICAL_SYNC
	lda		#43
	sta		TIM64T

	lda		#$4D
	sta		COLUP0
	sta		COLUP1

	lda		#0
	sta		tilerow

	; We include the same randomizer logic as on the splash screen
	; because the player could elect to start a new game at any time
	dec		randomizer
	bne		.checkReset
	lda		#26
	sta		randomizer
	
.checkReset
	lda		#%00000001
	bit		SWCHB
	bne		.noreset
	jmp		Game		; Player wants to start over
.noreset
	lda		controlsactive
	bne		.moreskipping	; Controls are locked out - skip button checks
	jmp		.checkSelect

.moreskipping
	jmp		.moveball

; First check if player has used SELECT button
; meaning they want to place or remove a flag
.checkSelect
	lda		SWCHB
	and		#%00000010
	bne		.selectUp
	sta		selectflag
	jmp		.checkJoy0Button

.selectUp
	lda		selectflag
	bne		.checkJoy0Button
	lda		#%00000010
	sta		selectflag
	jsr		.countrowsbegin
	lda		cursorx
	and		#1
	beq		.usetypeasprites	
	ldx		#TILEBLANKB			; In a type 'b' column (2,4,6,8)
	lda		tiles,y				; Check the value of the current tile
	cmp		#TILEFLAGB
	bne		.bnoflagpresent		
	lda		(minefield),y		; Already a flag here - needs to be removed
	cmp		#TILEMINEB
	bne		.placeflag
	inc		progress
	jmp		.placeflag
.bnoflagpresent					; No flag currently on this spot - add one?
	cmp		#TILEBLANKB
	bne		.checkJoy0Button	; Already a number here - do nothing
	lda		flagcount			; If we're here, it's a normal, unturned, unflagged tile
	and		#%00001111			
	beq		.checkJoy0Button	; If we have no more flags left, do nothing
	ldx		#TILEFLAGB			; Load the new flag we're going to place
	dec		flagcount			; Decrement the flag counter
	dec		flagcount			; (Double decrement is corrected with an inc at .placeflag)
	lda		(minefield),y			; Find out of there's a mine at this location on the field
	cmp		#TILEMINEB
	bne		.placeflag
	dec		progress			; If there is a mine, decrement the progress counter
	jmp		.placeflag
.usetypeasprites				
	ldx		#TILEBLANKA			; In a type 'a' column (1,3,5,7,9)
	lda		tiles,y				; Check the value of the current tile
	cmp		#TILEFLAGA
	bne		.anoflagpresent		
	lda		(minefield),y		; Already a flag here - needs to be removed
	cmp		#TILEMINEA
	bne		.placeflag
	inc		progress
	jmp		.placeflag
.anoflagpresent					; No flag currently on this spot - add one?
	cmp		#TILEBLANKA
	bne		.checkJoy0Button	; Already a number here - do nothing
	lda		flagcount			; If we're here, it's a normal, unturned, unflagged tile
	and		#%00001111
	beq		.checkJoy0Button	; If we have no more flags left, do nothing
	ldx		#TILEFLAGA
	dec		flagcount			; Decrement the flag counter
	dec		flagcount
	lda		(minefield),y			; Find out of there's a mine at this location on the field
	cmp		#TILEMINEA
	bne		.placeflag
	dec		progress			; If there is a mine, decrement the progress counter
	;dec		progress
.placeflag
	inc		flagcount
	stx		tiles,y				; Store the new tile (flag or blank) to the grid
	lda		progress
	beq		.wincondition
	jmp		.moveball

.skipitall						; Skip further controller/button checks
	jmp		.moveball
.gotolose						; Player lost
	jmp		.losecondition

; Now check if the player pressed FIRE (wants to uncover a tile)
.checkJoy0Button
	lda		#%10000000
	bit		INPT4
	bne		.checkJoy0directions 	; FIRE button not pressed 
									; go to checking joystick movement
	jsr		.countrowsbegin
	lda		tiles,y
	cmp		#TILEFLAGA		; Can't uncover a flagged tile
	beq		.skipitall
	cmp		#TILEFLAGB		; Can't uncover a flagged tile
	beq		.skipitall
	lda		(minefield),y
	sta		tiles,y
	cmp		#TILEMINEA		; KABOOM!
	beq		.gotolose
	cmp		#TILEMINEB		; BLAMMO!
	beq		.gotolose
	jmp		.checkJoy0directions

; Did the player uncover all the safe tiles?
.wincondition
	lda		#1
	sta		controlsactive
	lda		#60
	sta		timer
	jmp		.moveball	
	
; Now check if player is moving cursor using joystick
; We check directions in order: right, left, up, down
.checkJoy0directions
	lda		blinkcounter
	cmp		#30
	beq		.checkJoy0Right
	cmp		#60
	beq		.checkJoy0Right
	jmp		.moveball

; Helper subroutines used to read cursor location
.countrowsbegin
	lda		#0
	ldx		cursory
	inx
	clc
.countrows
	dex
	beq		.foundrow
	adc		#9
	jmp		.countrows
.foundrow
	adc		cursorx
	tay
	rts
	
.checkJoy0Right
	lda		#%10000000
	bit		SWCHA
	bne		.checkJoy0Left
	ldx		cursorx
	inx
	stx		cursorx
	cpx		#9
	bne		.checkJoy0Left
	ldx		#0
	stx		cursorx
	jmp		.moveball

.checkJoy0Left
	lda		#%01000000
	bit		SWCHA
	bne		.checkJoy0Up
	ldx		cursorx
	dex
	stx		cursorx
	bpl		.checkJoy0Up
	ldx		#8
	stx		cursorx
	jmp		.moveball

.checkJoy0Up
	lda		#%00010000
	bit		SWCHA
	bne		.checkJoy0Down
	ldx		cursory
	dex
	stx		cursory
	bpl		.checkJoy0Down
	ldx		#8
	stx		cursory
	jmp		.moveball

.checkJoy0Down
	lda		#%00100000
	bit		SWCHA
	bne		.moveball
	ldx		cursory
	inx
	stx		cursory
	cpx		#9
	bne		.moveball
	ldx		#0
	stx		cursory

; The ball sprite is used to draw the player cursor selection
.moveball
	sta		WSYNC
	sleep	34
	sta		RESBL
	ldy		cursorx
	beq		.ballplaced
.balloop
	lda		#%10000000
	sta		HMBL
	sta		WSYNC
	sta		HMOVE
	dey
	bne		.balloop
.ballplaced
	lda		#%11110000
	sta		HMBL
	sta		WSYNC
	sta		HMOVE
	sta		WSYNC
	lda		#0
	sta		HMBL

; Score/timer display logic
.initscore
	lda		empty
	sta		adigit1
	lda		flagcount
	tay
	and		#%00001111	; Mine count, low digit
	asl
	tax
	ldy		score10
	cmp		#%00010100
	bne		.notens
	ldy		score1
.notens
	sty		adigit1		; Mine count, high digit
	lda		score0,x
	sta		adigit0		; Mine count, low digit
	lda		sdigits+0
	asl
	tax
	lda		score0,x
	sta		adigit2
	lda		sdigits+1
	asl
	tax
	lda		score0,x
	sta		adigit3
	lda		sdigits+2
	asl
	tax
	lda		score0,x
	sta		adigit4
	
	lda		#%00000001
	sta		NUSIZ0
	lda		#%00000000
	sta		NUSIZ1
	sta		WSYNC
	sleep	50
	sta		RESP0
	;sleep 	2
	sta		RESP1
	;lda		#%11110000
	;sta		HMP0
	lda		#%10100000
	sta		HMP1
	sta		WSYNC
	sta		HMOVE
	lda		controlsactive
	bne		.explode
	lda		framecount
	bne		.explode
	lda		#60
	sta		framecount
	dec		sdigits+2
	bmi		.tensrollover
	jmp		.explode
.tensrollover
	lda		#9
	sta		sdigits+2
	dec		sdigits+1
	bmi		.hundredsrollover
	jmp		.explode
.hundredsrollover
	lda		#9
	sta		sdigits+2
	sta		sdigits+1
	dec		sdigits+0
	bmi		.outoftime
	jmp		.explode
	
	
.outoftime				; Out of time = lose
	lda		#0
	sta		sdigits+0
	sta		sdigits+1
	sta		sdigits+2
.losecondition				; Player loses
	lda		#$4F
	sta		col0
	sta		col1
	sta		COLUP0
	sta		COLUP1
	lda		#$40
	sta		background
	lda		#$FF
	sta		controlsactive	; Lock out controls
	tay
	lda		#40
	sta		timer
.reveal						; Reveal all tiles, iteratively
	lda		(minefield),y
	sta		tiles,y
	iny
	cpy		#81
	bne		.reveal
.explode					; Play explosion sound
	lda		controlsactive
	cmp		#$FF
	bne		.waitForVBlank
	ldx		timer
	beq		.waitForVBlank
	lda		#%00001111
	sta		AUDF0
	lda		#%00001000
	sta		AUDC0
	lda		#%00000111
	sta		AUDV0
	dec		timer
	bne		.waitForVBlank
	lda		#0
	sta		AUDF0
	sta		AUDC0
	sta		AUDV0
.waitForVBlank
	lda		INTIM
	bne		.waitForVBlank
	lda		#0
	sta		VBLANK
	sta		WSYNC


;------------------------------------------------
; Top-level drawing control routines
;------------------------------------------------

DrawScreen
	ldy		#6
.drawflagcount
	sta		WSYNC
	sleep	30
	dey
	lda		(adigit1),y
	sta		GRP1
	lda		(adigit0),y
	lda		flaga,y
	sta		GRP0
	lda		(adigit0),y
	sta		GRP0
	sta		WSYNC
	lda		#0
	sta		GRP0
	sta		GRP1
	tya
	bne		.drawflagcount
	sta		WSYNC
	sta		WSYNC
	sta		WSYNC
	ldy		#6
.drawtime
	sta		WSYNC
	sleep	35
	dey
	lda		(adigit2),y
	sta		GRP0
	lda		(adigit3),y
	sta		GRP1
	lda		(adigit4),y
	sta		GRP0
	sta		WSYNC
	lda		#0
	sta		GRP0
	sta		GRP1
	tya
	bne		.drawtime

.drawHappyface
	lda		controlsactive
	cmp		#1
	bne		.startgrid
	lda		timer
	beq		.winscreen
	dec		timer
	jmp		.startgrid
.winscreen
	lda		#%00000001
	sta		CTRLPF
	ldx		#21
.topblank
	sta		WSYNC
	dex
	bne		.topblank
	ldx		#80
.face
	lda		happyface,x
	sta		PF2
	sta		WSYNC
	dex
	bne		.face
	lda		#0
	sta		PF2
	ldx		#64
.bottomblank
	sta		WSYNC
	dex
	bne		.bottomblank
	jmp		.endofframe
	
.startgrid
	sta		WSYNC
	sleep 	36
	sta		RESP0
	lda		#%11110000
	sta		HMP0
	sta		WSYNC
	sta		HMOVE
	sleep 	37
	
	sta		RESP1
	lda		#%10100000
	sta		HMP1
	sta		WSYNC
	sta		HMOVE
	lda		#5
	sta		temp1
	lda		#%00000110
	sta		NUSIZ0
	lda		#%00000010
	sta		NUSIZ1
	lda		#0
	sta		GRP0
	sta		GRP1
	sta		tile
	lda		#0
	sta		HMP0
	sta		HMP1
	ldx		#20
	sta		WSYNC
	
.top
	sleep	33
	lda		#$FF
	sta		COLUBK
	lda		background
	sleep	21
	sta		COLUBK
	sta		WSYNC
.row
	lda		background
	sta		COLUBK
	lda		#1
	sta		PF1

	inc		tilerow
	ldy		tile
	lda		tiles,y
	sta		adigit0
	iny
	lda		tiles,y
	sta		bdigit0
	iny
	lda		tiles,y
	sta		adigit1
	iny
	lda		tiles,y
	sta		bdigit1
	iny
	lda		tiles,y
	sta		adigit2
	iny
	lda		tiles,y
	sta		bdigit2
	iny
	 
.keepdrawing
	lda		tiles,y
	sta		adigit3
	iny
	lda		tiles,y
	sta		bdigit3
	iny
	lda		tiles,y
	sta		adigit4
	iny
	sty		tile	
	lda		col0
	ldx		col1
	stx		col0
	sta		col1
	sleep 	15
	lda		#5
	sta		temp1
	ldx		cursory
	inx
	cpx		tilerow
	bne		.scanline
	dec		blinkcounter
	bne		.noresetblink
	lda		#60
	sta		blinkcounter
.noresetblink
	lda		#%00000010
	sta		ENABL
	jmp		.scanline
.interrupt
	jmp		.row
.scanline
	lda		#%01110110
	sta		HMP0
	sta		HMP1
	sta		NUSIZ0
	sta		WSYNC
	sta		HMOVE
	ldy		temp1		 	; load the scanline offset 
	lda		col0
	sta		COLUP0
	sta		COLUP1
	sleep	5
	lda		(adigit0),y		
	sta		GRP0	
	lda		(adigit1),y		
	sta		GRP1		 
	lda		(adigit2),y		
	sta		GRP0
	lda		(adigit3),y		
	sta		GRP1		 
	lda		(adigit4),y		
	sta		GRP0		 
	lda		#%10010010
	sta		NUSIZ0
	sta		HMP0
	sta		HMP1
	sta		WSYNC
	sta		HMOVE
	lda		col1
	sta		COLUP0
	sta		COLUP1
	sleep	9
	lda		(bdigit0),y		
	sta		GRP0		 
	lda		(bdigit1),y		
	sta		GRP1		 
	lda		(bdigit2),y		
	sta		GRP0
	lda		(bdigit3),y		
	sta		GRP1		 

	dec		temp1
	bpl		.scanline
	lda		#0
	sta		GRP0
	sta		GRP1
	sta		ENABL

	sleep	10
	lda		tilerow
	cmp		#9
	bne		.interrupt
.bot 
	lda		#0
	sta		PF0
	sta		PF1
	lda		#$FF
	sleep	13
	sta		COLUBK
	lda		background
	sleep	21
	sta		COLUBK
	sta		WSYNC
	ldx		#25
.margin
	sta		WSYNC
	dex
	bne		.margin

.endofframe
	lda		#%01000010
	sta		VBLANK
	lda		#36
	sta		TIM64T

	;***** Run Overscan Code
	dec		framecount
	lda		col0
	ldx		col1
	stx		col0
	sta		col1
.waitForOverscan
	lda				 INTIM
	bne				 .waitForOverscan

	;jmp		(loopstart)
	jmp		MainLoop
	
;------------------------------------------------
; Interrupt Vectors
;------------------------------------------------
			 echo [*-$F000]d, " ROM bytes used"
	ORG				$FFFA
	.word		Start								 ; NMI
	.word		Start								 ; RESET
	.word		Start								 ; IRQ
			 
	END
